name: CI/CD TestRun

# Events to trigger workflow start:
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Constants to run workflow with:
env:
  PYTHON_VERSION: '3.12'
  OS_TYPE: 'ubuntu-latest'

permissions:
  contents: read

jobs:
  clear_logs:
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
      - uses: actions/checkout@v4

      - name: Clear previous sessions logs
        run: |
          ./.github/delete-logs.sh sarzamas/pytest_rest_example_pets CI.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  matrix_config:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.set_os_type.outputs.os_type }}
      python_version: ${{ steps.set_python_version.outputs.python_version }}
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    env:
      CONSTRUCTOR: '
        {
            \"include\": [{
                \"python-version\": \"$PYTHON_VERSION\"
            },
            {
                \"os\": \"$OS_TYPE\"
            }]
        }
      '
      A: '{\"include\":[{\"python-version\":\"$PYTHON_VERSION\"},{\"os\":\"$OS_TYPE\"}]}'

    steps:
      - name: matrix constructor
        run: |
          CONST=$CONSTRUCTOR | jq -c .
          echo $CONST
          JSON="{\"include\": [{\"python-version\": \"$PYTHON_VERSION\"}, {\"os\": \"$OS_TYPE\"}]}"
          echo $JSON
          echo $JSON | jq -c .
          echo "matrix=$JSON"

      - name: 'matrix: [os_type], [python_version]'
        id: set_matrix
        # run echo "matrix=$(jq -c . < ./matrix.json)" >> $GITHUB_OUTPUT
        # run: |
        #   echo "matrix={\"include\":[{\"python-version\":\"$PYTHON_VERSION\"},{\"os\":\"$OS_TYPE\"}]}" >> $GITHUB_OUTPUT
        run: |
          JSON="{\"include\":[{\"os\":\"$OS_TYPE\"},{\"python-version\":\"$PYTHON_VERSION\"}]}"
          echo $JSON
          echo $JSON | jq -c .
          echo "matrix=$JSON" >> $GITHUB_OUTPUT


      - name: 'matrix: os_type'
        id: set_os_type
        # run echo "matrix=$(jq -c . < ./matrix.json)" >> $GITHUB_OUTPUT
        run: |
          echo "os_type={\"include\":[{\"os\":\"$OS_TYPE\"}]}" >> $GITHUB_OUTPUT

      - name: 'matrix: python_version'
        id: set_python_version
        # run echo "matrix=$(jq -c . < ./matrix.json)" >> $GITHUB_OUTPUT
        run: |
          echo "python_version={\"include\":[{\"python-version\":\"$PYTHON_VERSION\"}]}" >> $GITHUB_OUTPUT

  qodana:
    #runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    permissions:
      contents: read
      checks: write

    strategy:
      fail-fast: false
      # https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
      matrix:
        # os: [ $OS_TYPE ]
        ${{ fromJSON(needs.matrix_config.outputs.matrix) }}
        # python-version: [ $PYTHON_VERSION ]
        # ${{ fromJSON(needs.matrix_config.outputs.python_version) }}

    steps:
      - uses: actions/checkout@v4
        with:
          # fetch all history for all branches and tags
          fetch-depth: 0

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          # python-version: '3.12'
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Qodana Scan
        uses: JetBrains/qodana-action@v2023.2
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
      - name: Qodana Report
        run: echo "üèÅ Qodana Cloud üèÅ -  https://qodana.cloud/projects/3B4gd/reports/4eb5W"

  lint:
    runs-on: ${{ matrix.os }}
    needs: clear_logs

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black colorama emoji flake8 isort mypy pylint --upgrade

      - name: Run Import formatter
        run: |
          isort --version
          isort . pyproject.toml --check --diff --only-modified

      - name: Run Code formatter
        run: |
          black --version
          black . --check --diff

      - name: Analysing the code with pylint
        run: |
          pylint --version
          pylint $(git ls-files '*.py')

      - name: Lint with flake8
        run: |
          flake8 --version
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
          # stop the build if there are Python syntax errors or undefined names
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    runs-on: ${{ matrix.os }}
    needs: clear_logs

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Test with pytest
        run: pytest --junitxml=report.xml

      - name: Archive TestRun results
        uses: actions/upload-artifact@v3
        with:
          name: TestRun report
          path: ./report.xml
          retention-days: 5
