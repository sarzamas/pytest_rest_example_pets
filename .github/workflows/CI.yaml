name: CI/CD TestRun
run-name: üß±üößüß± Quality Gate üß±üößüß±

# Events to trigger workflow start:
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Constants to run workflow with:
env:
  PYTHON_VERSION: '3.12'
  OS_TYPE: ubuntu-latest

# Cancel workflow policy
concurrency:
  group: CI-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  clear_logs:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .github/scripts
    permissions:
      actions: write

    steps:
      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Show Content
        run: pwd && ls -lah

      - name: Clear previous sessions logs
        run: ./delete-logs.sh ${{ github.repository }} CI.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  matrix_config:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.save.outputs.json }}

    steps:
      - name:  Prepare matrix JSON Object
        id: save
        uses: nickofthyme/object-remap@v2.0.0
        with:
          include: '[ toJSON(os.[ ${{ env.OS_TYPE }} ], python.[ ${{ env.PYTHON_VERSION }} ]) ]'

  qodana:
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    permissions:
      contents: read
      checks: write

    strategy:
      fail-fast: false
      # https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
      matrix:
        include:
          - os: ubuntu-latest
            python: 3.12
#        ${{ fromJSON(needs.matrix_config.outputs.json) }}

    steps:
      - run: echo ${{ toJSON(fromJSON(needs.matrix_config.outputs.json)) }}
                # ${{ toJSON(fromJSON(steps.mock.outputs.json).array.*.test) }}
      - name: Show Matrix context
        run: echo "${{ toJson(matrix) }}"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          # fetch all history for all branches and tags
          fetch-depth: 0

      - name: Set-Up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          # python-version: '3.12'
          python-version: ${{ matrix.python }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Qodana Scan
        uses: JetBrains/qodana-action@v2023.2
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
      - name: Qodana Report
        run: echo "üèÅ Qodana Cloud üèÅ -  https://qodana.cloud/projects/3B4gd/reports/4eb5W"

  lint:
    runs-on: ${{ matrix.os }}
    needs: clear_logs

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.12 ]

    steps:
      - name: Show Matrix context
        run: echo "${{ toJson(matrix) }}"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black colorama emoji flake8 isort mypy pylint --upgrade

      - name: Run Import formatter
        run: |
          isort --version
          isort . pyproject.toml --check --diff --only-modified

      - name: Run Code formatter
        run: |
          black --version
          black . --check --diff

      - name: Analysing the code with pylint
        run: |
          pylint --version
          pylint $(git ls-files '*.py')

      - name: Lint with flake8
        run: |
          flake8 --version
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
          # stop the build if there are Python syntax errors or undefined names
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    runs-on: ${{ matrix.os }}
    needs: clear_logs

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.12 ]

    steps:
      - name: Show Matrix context
        run: echo "${{ toJson(matrix) }}"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        run: python -c "import sys; print(f'üéå Python-{sys.version}')"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Test with pytest
        run: pytest --junitxml=report.xml

      - name: Archive TestRun results
        uses: actions/upload-artifact@v3
        with:
          name: TestRun report
          path: ./report.xml
          retention-days: 5
