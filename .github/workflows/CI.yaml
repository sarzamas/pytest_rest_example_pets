name: CI/CD TestRun
run-name: üß±üößüß± Quality Gate üß±üößüß±

# Events to trigger workflow start:
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Constants to run workflow with:
env:
  PYTHON_VERSION: '[3.12]'
  OS_TEXT: The operating system on the runner is
  OS_TYPE: '["ubuntu-latest", "windows-latest"]'
  QODANA_CLOUD: https://qodana.cloud/projects/3B4gd/reports

# Cancel workflow policy
concurrency:
  group: CI-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # *******************************
  clear_logs:
  # *******************************
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/scripts
    permissions:
      actions: write

    steps:
      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Show available scripts
        run: pwd && ls -lah

      - name: Clear previous sessions logs
        run: ./delete-logs.sh ${{ github.repository }} CI.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # *******************************
  matrix_config:
  # *******************************
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.json }}

    steps:
      - name: Prepare matrix JSON Object
        id: prepare
        uses: nickofthyme/object-remap@v2.0.0
        with:
          __case: kebab
          os: ${{ env.OS_TYPE }}
          python_version: ${{ env.PYTHON_VERSION }}

      - name: Dump matrix content
        env:
           MATRIX: ${{ toJson(steps.prepare.outputs.json) }}
        run: echo "$MATRIX"

  # *******************************
  qodana:
  # *******************************
    if: runner.os != 'Windows'

    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    permissions:
      contents: read
      checks: write

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Dump matrix context
        env:
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          # fetch all history for all branches and tags
          fetch-depth: 0

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}üéå Python-{sys.version}")

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Qodana Scan
        uses: JetBrains/qodana-action@v2023.2
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
      - name: Qodana Report
        run: echo "üèÅ Qodana Cloud üèÅ -  ${{ env.QODANA_CLOUD }}"

  # *******************************
  lint:
  # *******************************
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Dump matrix context
        env:
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}üéå Python-{sys.version}")

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install black colorama emoji flake8 isort mypy pylint --upgrade

      - name: Run Import formatter
        run: |
          isort --version
          isort . pyproject.toml --check --diff --only-modified

      - name: Run Code formatter
        run: |
          black --version
          black . --check --diff

      - name: Analysing the code with pylint
        run: |
          pylint --version
          pylint $(git ls-files '*.py')

      - name: Lint with flake8
        run: |
          flake8 --version
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
          # stop the build if there are Python syntax errors or undefined names
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # *******************************
  test:
  # *******************************
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Dump matrix context
        env:
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}üéå Python-{sys.version}")

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Test with pytest
        run: pytest --junitxml=report.xml

      - name: Archive TestRun results
        uses: actions/upload-artifact@v3
        with:
          name: TestRun report
          path: ./report.xml
          retention-days: 5
