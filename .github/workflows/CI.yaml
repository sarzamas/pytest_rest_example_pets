name: CI/CD TestRun
run-name: 🧱🚧🧱 Quality Gate 🧱🚧🧱

# Events to trigger workflow start:
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Constants to run workflow with:
env:
  PYTHON_VERSION: '[ 3.12 ]'
  OS_TEXT: The operating system on the runner is
  OS_TYPE: '[ "ubuntu-latest", "windows-latest" ]'
  EXCLUDE: '[ {"os": "windows-latest"}, {"python-version": 3.12} ]'
  QODANA_CLOUD: https://qodana.cloud/projects/3B4gd/reports

# Cancel workflow policy
concurrency:
  group: CI-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # *******************************
  clear_logs:
    name: Очистка прошлых логов
    # *****************************
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/scripts
    permissions:
      actions: write

    steps:
      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Show available scripts
        run: pwd && ls -lah

      - name: Clear previous sessions logs
        run: ./delete-logs.sh ${{ github.repository }} CI.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # *******************************
  matrix_config:
    name: Параметры матрицы прогонов
    # *****************************
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.json }}

    steps:
      - name: Prepare matrix JSON Object
        id: prepare
        uses: nickofthyme/object-remap@v2.0.0
        with:
          __case: kebab
          os: ${{ env.OS_TYPE }}
          python_version: ${{ env.PYTHON_VERSION }}
          # exclude: ${{ env.EXCLUDE }}

      - name: Dump matrix content
        env:
          MATRIX: ${{ toJSON(steps.prepare.outputs.json) }}
        run: echo $MATRIX

  # *******************************
  qodana:
    name: Qodana Code Quality Check
    # *****************************
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    permissions:
      contents: write
      pull-requests: write
      checks: write

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Show matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo $MATRIX_CONTEXT

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          # check out the actual pull request commit, not the merge commit:
          ref: ${{ github.event.pull_request.head.sha }}
          # fetch all history of all branches and tags for pull request analysis:
          fetch-depth: 0

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}🎌 Python-{sys.version}")

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip wheel -r requirements.txt; fi

      - name: Qodana Report
        run: echo "🏁 Qodana Cloud 🏁 -  $QODANA_CLOUD"

      - name: Run Qodana Scan
        if: runner.os != 'Windows'
        uses: JetBrains/qodana-action@v2024.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

  # *******************************
  lint:
    name: Linter Check
    # *****************************
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Show matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo $MATRIX_CONTEXT

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}🎌 Python-{sys.version}")

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip wheel -r requirements.txt; fi
          pip install black colorama emoji flake8 isort mypy pylint --upgrade

      - name: Run Import formatter
        run: |
          pwd
          isort --version
          isort . pyproject.toml --check --diff --only-modified

      - name: Run Code formatter
        run: |
          black --version
          black . --check --diff

      - name: Analysing the code with pylint
        if: runner.os != 'Windows'
        run: |
          pylint --version
          pylint $(git ls-files '*.py')

      - name: Lint with flake8
        run: |
          flake8 --version
          flake8 $(git ls-files '*.py') --append-config ./pyproject.toml

  # *******************************
  test:
    name: Test Run
    # *****************************
    runs-on: ${{ matrix.os }}
    needs: [ clear_logs, matrix_config ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_config.outputs.matrix) }}

    steps:
      - name: Show matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo $MATRIX_CONTEXT

      - name: Check out repo ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Set-Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          architecture: x64

      - name: Display Python version
        shell: python
        run: |
          import os, platform, sys; sys.stdout.reconfigure(encoding='utf-8')
          print(f"{os.linesep}${{ env.OS_TEXT }} {platform.system()}{os.linesep}🎌 Python-{sys.version}")
      - id: store
        run: echo "version=$(python --version | tr ' ' '-')" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get install -y python-is-python3
      - run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Test with pytest
        id: testrun
        env:
          REPORT_XML: TestRun-report-${{ steps.store.outputs.version }}.xml
          REPORT_HTML: TestRun-report-${{ steps.store.outputs.version }}.html
        run: |
          pytest $(echo "--junitxml $REPORT_XML --html $REPORT_HTML --self-contained-html") || true
          echo "path_xml=$(echo $REPORT_XML)" >> $GITHUB_OUTPUT
          echo "path_html=$(echo $REPORT_HTML)" >> $GITHUB_OUTPUT

      - name: Archive TestRun results in HTML
        id: artifact-html
        uses: actions/upload-artifact@v4
        with:
          name: TestRun report ${{ runner.os }} ${{ steps.store.outputs.version }}.html
          path: ${{ steps.testrun.outputs.path_html }}
          if-no-files-found: error
          compression-level: 0
          retention-days: 5

      - name: Artifact HTML-ID is ${{ env.ID }}
        env:
          ID: ${{ steps.artifact-html.outputs.artifact-id }}
        run: echo HTML-ID $ID

      - name: Archive TestRun results in XML
        id: artifact-xml
        uses: actions/upload-artifact@v4
        with:
          name: TestRun report ${{ runner.os }} ${{ steps.store.outputs.version }}.xml
          path: ${{ steps.testrun.outputs.path_xml }}
          if-no-files-found: error
          compression-level: 0
          retention-days: 5

      - name: Artifact XML-ID is ${{ env.ID }}
        env:
          ID: ${{ steps.artifact-xml.outputs.artifact-id }}
        run: echo XML-ID $ID

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          title: Test Results for Python${{ matrix.python-version }} on ${{ matrix.os }}
          path: ${{ steps.testrun.outputs.path_xml }}
          fail-on-empty: true
          summary: true
          display-options: fExX
